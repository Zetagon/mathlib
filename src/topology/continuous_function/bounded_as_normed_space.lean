/-
Copyright (c) 2018 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Mario Carneiro, Yury Kudryashov, Heather Macbeth
-/
import analysis.normed_space.basic
import topology.continuous_function.bounded

/-!
# Normed space structure on the space of bounded continuous functions

We show that, when the space `Œ≤` is a normed group, then the space of bounded continuous functions
from `Œ±` to `Œ≤` inherits a normed space structure. The same goes for normed spaces, normed rings
and normed algebras.
-/

noncomputable theory
open_locale topological_space classical nnreal bounded_continuous_function

universes u v w
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

namespace bounded_continuous_function

section normed_group
/- In this section, if Œ≤ is a normed group, then we show that the space of bounded
continuous functions from Œ± to Œ≤ inherits a normed group structure, by using
pointwise operations and checking that they are compatible with the uniform distance. -/

variables [topological_space Œ±] [normed_group Œ≤]
variables (f g : Œ± ‚Üí·µá Œ≤) {x : Œ±} {C : ‚Ñù}

instance : has_zero (Œ± ‚Üí·µá Œ≤) := ‚ü®const Œ± 0‚ü©

@[simp] lemma coe_zero : ((0 : Œ± ‚Üí·µá Œ≤) : Œ± ‚Üí Œ≤) = 0 := rfl

instance : has_norm (Œ± ‚Üí·µá Œ≤) := ‚ü®Œªu, dist u 0‚ü©

lemma norm_def : ‚à•f‚à• = dist f 0 := rfl

/-- The norm of a bounded continuous function is the supremum of `‚à•f x‚à•`.
We use `Inf` to ensure that the definition works if `Œ±` has no elements. -/
lemma norm_eq (f : Œ± ‚Üí·µá Œ≤) :
  ‚à•f‚à• = Inf {C : ‚Ñù | 0 ‚â§ C ‚àß ‚àÄ (x : Œ±), ‚à•f x‚à• ‚â§ C} :=
by simp [norm_def, bounded_continuous_function.dist_eq]

lemma norm_coe_le_norm (x : Œ±) : ‚à•f x‚à• ‚â§ ‚à•f‚à• := calc
  ‚à•f x‚à• = dist (f x) ((0 : Œ± ‚Üí·µá Œ≤) x) : by simp [dist_zero_right]
  ... ‚â§ ‚à•f‚à• : dist_coe_le_dist _

lemma dist_le_two_norm' {f : Œ≥ ‚Üí Œ≤} {C : ‚Ñù} (hC : ‚àÄ x, ‚à•f x‚à• ‚â§ C) (x y : Œ≥) :
  dist (f x) (f y) ‚â§ 2 * C :=
calc dist (f x) (f y) ‚â§ ‚à•f x‚à• + ‚à•f y‚à• : dist_le_norm_add_norm _ _
                  ... ‚â§ C + C         : add_le_add (hC x) (hC y)
                  ... = 2 * C         : (two_mul _).symm

/-- Distance between the images of any two points is at most twice the norm of the function. -/
lemma dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚à•f‚à• :=
dist_le_two_norm' f.norm_coe_le_norm x y

variable {f}

/-- The norm of a function is controlled by the supremum of the pointwise norms -/
lemma norm_le (C0 : (0 : ‚Ñù) ‚â§ C) : ‚à•f‚à• ‚â§ C ‚Üî ‚àÄx:Œ±, ‚à•f x‚à• ‚â§ C :=
by simpa using @dist_le _ _ _ _ f 0 _ C0

lemma norm_le_of_nonempty [nonempty Œ±]
  {f : Œ± ‚Üí·µá Œ≤} {M : ‚Ñù} : ‚à•f‚à• ‚â§ M ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ M :=
begin
  simp_rw [norm_def, ‚Üêdist_zero_right],
  exact dist_le_iff_of_nonempty,
end

lemma norm_lt_iff_of_compact [compact_space Œ±]
  {f : Œ± ‚Üí·µá Œ≤} {M : ‚Ñù} (M0 : 0 < M) : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
begin
  simp_rw [norm_def, ‚Üêdist_zero_right],
  exact dist_lt_iff_of_compact M0,
end

lemma norm_lt_iff_of_nonempty_compact [nonempty Œ±] [compact_space Œ±]
  {f : Œ± ‚Üí·µá Œ≤} {M : ‚Ñù} : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
begin
  simp_rw [norm_def, ‚Üêdist_zero_right],
  exact dist_lt_iff_of_nonempty_compact,
end

variable (f)

/-- Norm of `const Œ± b` is less than or equal to `‚à•b‚à•`. If `Œ±` is nonempty,
then it is equal to `‚à•b‚à•`. -/
lemma norm_const_le (b : Œ≤) : ‚à•const Œ± b‚à• ‚â§ ‚à•b‚à• :=
(norm_le (norm_nonneg b)).2 $ Œª x, le_refl _

@[simp] lemma norm_const_eq [h : nonempty Œ±] (b : Œ≤) : ‚à•const Œ± b‚à• = ‚à•b‚à• :=
le_antisymm (norm_const_le b) $ h.elim $ Œª x, (const Œ± b).norm_coe_le_norm x

/-- Constructing a bounded continuous function from a uniformly bounded continuous
function taking values in a normed group. -/
def of_normed_group {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±] [normed_group Œ≤]
  (f : Œ± ‚Üí Œ≤) (Hf : continuous f) (C : ‚Ñù) (H : ‚àÄx, ‚à•f x‚à• ‚â§ C) : Œ± ‚Üí·µá Œ≤ :=
‚ü®‚ü®Œªn, f n, Hf‚ü©, ‚ü®_, dist_le_two_norm' H‚ü©‚ü©

@[simp] lemma coe_of_normed_group
  {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±] [normed_group Œ≤]
  (f : Œ± ‚Üí Œ≤) (Hf : continuous f) (C : ‚Ñù) (H : ‚àÄx, ‚à•f x‚à• ‚â§ C) :
  (of_normed_group f Hf C H : Œ± ‚Üí Œ≤) = f := rfl

lemma norm_of_normed_group_le {f : Œ± ‚Üí Œ≤} (hfc : continuous f) {C : ‚Ñù} (hC : 0 ‚â§ C)
  (hfC : ‚àÄ x, ‚à•f x‚à• ‚â§ C) : ‚à•of_normed_group f hfc C hfC‚à• ‚â§ C :=
(norm_le hC).2 hfC

/-- Constructing a bounded continuous function from a uniformly bounded
function on a discrete space, taking values in a normed group -/
def of_normed_group_discrete {Œ± : Type u} {Œ≤ : Type v}
  [topological_space Œ±] [discrete_topology Œ±] [normed_group Œ≤]
  (f : Œ±  ‚Üí Œ≤) (C : ‚Ñù) (H : ‚àÄx, norm (f x) ‚â§ C) : Œ± ‚Üí·µá Œ≤ :=
of_normed_group f continuous_of_discrete_topology C H

@[simp] lemma coe_of_normed_group_discrete
  {Œ± : Type u} {Œ≤ : Type v} [topological_space Œ±] [discrete_topology Œ±] [normed_group Œ≤]
  (f : Œ± ‚Üí Œ≤) (C : ‚Ñù) (H : ‚àÄx, ‚à•f x‚à• ‚â§ C) :
  (of_normed_group_discrete f C H : Œ± ‚Üí Œ≤) = f := rfl

/-- The pointwise sum of two bounded continuous functions is again bounded continuous. -/
instance : has_add (Œ± ‚Üí·µá Œ≤) :=
‚ü®Œªf g, of_normed_group (f + g) (f.continuous.add g.continuous) (‚à•f‚à• + ‚à•g‚à•) $ Œª x,
  le_trans (norm_add_le _ _) (add_le_add (f.norm_coe_le_norm x) (g.norm_coe_le_norm x))‚ü©

/-- The pointwise opposite of a bounded continuous function is again bounded continuous. -/
instance : has_neg (Œ± ‚Üí·µá Œ≤) :=
‚ü®Œªf, of_normed_group (-f) f.continuous.neg ‚à•f‚à• $ Œª x,
  trans_rel_right _ (norm_neg _) (f.norm_coe_le_norm x)‚ü©

/-- The pointwise difference of two bounded continuous functions is again bounded continuous. -/
instance : has_sub (Œ± ‚Üí·µá Œ≤) :=
‚ü®Œªf g, of_normed_group (f - g) (f.continuous.sub g.continuous) (‚à•f‚à• + ‚à•g‚à•) $ Œª x,
  by { simp only [sub_eq_add_neg],
       exact le_trans (norm_add_le _ _) (add_le_add (f.norm_coe_le_norm x) $
         trans_rel_right _ (norm_neg _) (g.norm_coe_le_norm x)) }‚ü©

@[simp] lemma coe_add : ‚áë(f + g) = f + g := rfl
lemma add_apply : (f + g) x = f x + g x := rfl
@[simp] lemma coe_neg : ‚áë(-f) = -f := rfl
lemma neg_apply : (-f) x = -f x := rfl

lemma forall_coe_zero_iff_zero : (‚àÄx, f x = 0) ‚Üî f = 0 :=
(@ext_iff _ _ _ _ f 0).symm

instance : add_comm_group (Œ± ‚Üí·µá Œ≤) :=
{ add_assoc      := assume f g h, by ext; simp [add_assoc],
  zero_add       := assume f, by ext; simp,
  add_zero       := assume f, by ext; simp,
  add_left_neg   := assume f, by ext; simp,
  add_comm       := assume f g, by ext; simp [add_comm],
  sub_eq_add_neg := assume f g, by { ext, apply sub_eq_add_neg },
  ..bounded_continuous_function.has_add,
  ..bounded_continuous_function.has_neg,
  ..bounded_continuous_function.has_sub,
  ..bounded_continuous_function.has_zero }

@[simp] lemma coe_sub : ‚áë(f - g) = f - g := rfl
lemma sub_apply : (f - g) x = f x - g x := rfl

/-- Coercion of a `normed_group_hom` is an `add_monoid_hom`. Similar to `add_monoid_hom.coe_fn` -/
@[simps]
def coe_fn_add_hom : (Œ± ‚Üí·µá Œ≤) ‚Üí+ (Œ± ‚Üí Œ≤) :=
{ to_fun := coe_fn, map_zero' := coe_zero, map_add' := coe_add}

open_locale big_operators
@[simp] lemma coe_sum {Œπ : Type*} (s : finset Œπ) (f : Œπ ‚Üí (Œ± ‚Üí·µá Œ≤)) :
  ‚áë(‚àë i in s, f i) = (‚àë i in s, (f i : Œ± ‚Üí Œ≤)) :=
(@coe_fn_add_hom Œ± Œ≤ _ _).map_sum f s

lemma sum_apply {Œπ : Type*} (s : finset Œπ) (f : Œπ ‚Üí (Œ± ‚Üí·µá Œ≤)) (a : Œ±) :
  (‚àë i in s, f i) a = (‚àë i in s, f i a) :=
by simp

instance : normed_group (Œ± ‚Üí·µá Œ≤) :=
{ dist_eq := Œª f g, by simp only [norm_eq, dist_eq, dist_eq_norm, sub_apply] }

lemma abs_diff_coe_le_dist : ‚à•f x - g x‚à• ‚â§ dist f g :=
by { rw dist_eq_norm, exact (f - g).norm_coe_le_norm x }

lemma coe_le_coe_add_dist {f g : Œ± ‚Üí·µá ‚Ñù} : f x ‚â§ g x + dist f g :=
sub_le_iff_le_add'.1 $ (abs_le.1 $ @dist_coe_le_dist _ _ _ _ f g x).2

variables (Œ± Œ≤)

/--
The additive map forgetting that a bounded continuous function is bounded.
-/
@[simps]
def forget_boundedness_add_hom : (Œ± ‚Üí·µá Œ≤) ‚Üí+ C(Œ±, Œ≤) :=
{ to_fun := forget_boundedness Œ± Œ≤,
  map_zero' := by { ext, simp, },
  map_add' := by { intros, ext, simp, }, }

end normed_group

section normed_space
/-!
### Normed space structure

In this section, if `Œ≤` is a normed space, then we show that the space of bounded
continuous functions from `Œ±` to `Œ≤` inherits a normed space structure, by using
pointwise operations and checking that they are compatible with the uniform distance. -/

variables {ùïú : Type*} [normed_field ùïú]
variables [topological_space Œ±] [normed_group Œ≤] [normed_space ùïú Œ≤]
variables {f g : Œ± ‚Üí·µá Œ≤} {x : Œ±} {C : ‚Ñù}

instance : has_scalar ùïú (Œ± ‚Üí·µá Œ≤) :=
‚ü®Œª c f, of_normed_group (c ‚Ä¢ f) (f.continuous.const_smul c) (‚à•c‚à• * ‚à•f‚à•) $ Œª x,
  trans_rel_right _ (norm_smul _ _)
    (mul_le_mul_of_nonneg_left (f.norm_coe_le_norm _) (norm_nonneg _))‚ü©

@[simp] lemma coe_smul (c : ùïú) (f : Œ± ‚Üí·µá Œ≤) : ‚áë(c ‚Ä¢ f) = Œª x, c ‚Ä¢ (f x) := rfl
lemma smul_apply (c : ùïú) (f : Œ± ‚Üí·µá Œ≤) (x : Œ±) : (c ‚Ä¢ f) x = c ‚Ä¢ f x := rfl

instance : module ùïú (Œ± ‚Üí·µá Œ≤) :=
module.of_core $
{ smul     := (‚Ä¢),
  smul_add := Œª c f g, ext $ Œª x, smul_add c (f x) (g x),
  add_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, add_smul c‚ÇÅ c‚ÇÇ (f x),
  mul_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, mul_smul c‚ÇÅ c‚ÇÇ (f x),
  one_smul := Œª f, ext $ Œª x, one_smul ùïú (f x) }

instance : normed_space ùïú (Œ± ‚Üí·µá Œ≤) := ‚ü®Œª c f, norm_of_normed_group_le _
  (mul_nonneg (norm_nonneg _) (norm_nonneg _)) _‚ü©

variables (ùïú)
/-- The evaluation at a point, as a continuous linear map from `Œ± ‚Üí·µá Œ≤` to `Œ≤`. -/
def eval_clm (x : Œ±) : (Œ± ‚Üí·µá Œ≤) ‚ÜíL[ùïú] Œ≤ :=
{ to_fun := Œª f, f x,
  map_add' := Œª f g, by simp only [pi.add_apply, coe_add],
  map_smul' := Œª c f, by simp only [coe_smul] }

@[simp] lemma eval_clm_apply (x : Œ±) (f : Œ± ‚Üí·µá Œ≤) :
  eval_clm ùïú x f = f x := rfl

variables (Œ± Œ≤)

/-- The linear map forgetting that a bounded continuous function is bounded. -/
@[simps]
def forget_boundedness_linear_map : (Œ± ‚Üí·µá Œ≤) ‚Üí‚Çó[ùïú] C(Œ±, Œ≤) :=
{ to_fun := forget_boundedness Œ± Œ≤,
  map_smul' := by { intros, ext, simp, },
  map_add' := by { intros, ext, simp, }, }

end normed_space

section normed_ring
/-!
### Normed ring structure

In this section, if `R` is a normed ring, then we show that the space of bounded
continuous functions from `Œ±` to `R` inherits a normed ring structure, by using
pointwise operations and checking that they are compatible with the uniform distance. -/

variables [topological_space Œ±] {R : Type*} [normed_ring R]

instance : ring (Œ± ‚Üí·µá R) :=
{ one := const Œ± 1,
  mul := Œª f g, of_normed_group (f * g) (f.continuous.mul g.continuous) (‚à•f‚à• * ‚à•g‚à•) $ Œª x,
    le_trans (normed_ring.norm_mul (f x) (g x)) $
      mul_le_mul (f.norm_coe_le_norm x) (g.norm_coe_le_norm x) (norm_nonneg _) (norm_nonneg _),
  one_mul := Œª f, ext $ Œª x, one_mul (f x),
  mul_one := Œª f, ext $ Œª x, mul_one (f x),
  mul_assoc := Œª f‚ÇÅ f‚ÇÇ f‚ÇÉ, ext $ Œª x, mul_assoc _ _ _,
  left_distrib := Œª f‚ÇÅ f‚ÇÇ f‚ÇÉ, ext $ Œª x, left_distrib _ _ _,
  right_distrib := Œª f‚ÇÅ f‚ÇÇ f‚ÇÉ, ext $ Œª x, right_distrib _ _ _,
  .. bounded_continuous_function.add_comm_group }

@[simp] lemma coe_mul (f g : Œ± ‚Üí·µá R) : ‚áë(f * g) = f * g := rfl
lemma mul_apply (f g : Œ± ‚Üí·µá R) (x : Œ±) : (f * g) x = f x * g x := rfl

instance : normed_ring (Œ± ‚Üí·µá R) :=
{ norm_mul := Œª f g, norm_of_normed_group_le _ (mul_nonneg (norm_nonneg _) (norm_nonneg _)) _,
  .. bounded_continuous_function.normed_group }

end normed_ring

section normed_comm_ring
/-!
### Normed commutative ring structure

In this section, if `R` is a normed commutative ring, then we show that the space of bounded
continuous functions from `Œ±` to `R` inherits a normed commutative ring structure, by using
pointwise operations and checking that they are compatible with the uniform distance. -/

variables [topological_space Œ±] {R : Type*} [normed_comm_ring R]

instance : comm_ring (Œ± ‚Üí·µá R) :=
{ mul_comm := Œª f‚ÇÅ f‚ÇÇ, ext $ Œª x, mul_comm _ _,
  .. bounded_continuous_function.ring }

instance : normed_comm_ring (Œ± ‚Üí·µá R) :=
{ .. bounded_continuous_function.comm_ring, .. bounded_continuous_function.normed_group }

end normed_comm_ring

section normed_algebra
/-!
### Normed algebra structure

In this section, if `Œ≥` is a normed algebra, then we show that the space of bounded
continuous functions from `Œ±` to `Œ≥` inherits a normed algebra structure, by using
pointwise operations and checking that they are compatible with the uniform distance. -/

variables {ùïú : Type*} [normed_field ùïú]
variables [topological_space Œ±] [normed_group Œ≤] [normed_space ùïú Œ≤]
variables [normed_ring Œ≥] [normed_algebra ùïú Œ≥]
variables {f g : Œ± ‚Üí·µá Œ≥} {x : Œ±} {c : ùïú}

/-- `bounded_continuous_function.const` as a `ring_hom`. -/
def C : ùïú ‚Üí+* (Œ± ‚Üí·µá Œ≥) :=
{ to_fun    := Œª (c : ùïú), const Œ± ((algebra_map ùïú Œ≥) c),
  map_one'  := ext $ Œª x, (algebra_map ùïú Œ≥).map_one,
  map_mul'  := Œª c‚ÇÅ c‚ÇÇ, ext $ Œª x, (algebra_map ùïú Œ≥).map_mul _ _,
  map_zero' := ext $ Œª x, (algebra_map ùïú Œ≥).map_zero,
  map_add'  := Œª c‚ÇÅ c‚ÇÇ, ext $ Œª x, (algebra_map ùïú Œ≥).map_add _ _ }

instance : algebra ùïú (Œ± ‚Üí·µá Œ≥) :=
{ to_ring_hom := C,
  commutes' := Œª c f, ext $ Œª x, algebra.commutes' _ _,
  smul_def' := Œª c f, ext $ Œª x, algebra.smul_def' _ _,
  ..bounded_continuous_function.module,
  ..bounded_continuous_function.ring }

@[simp] lemma algebra_map_apply (k : ùïú) (a : Œ±) :
  algebra_map ùïú (Œ± ‚Üí·µá Œ≥) k a = k ‚Ä¢ 1 :=
by { rw algebra.algebra_map_eq_smul_one, refl, }

instance [nonempty Œ±] : normed_algebra ùïú (Œ± ‚Üí·µá Œ≥) :=
{ norm_algebra_map_eq := Œª c, begin
    calc ‚à• (algebra_map ùïú (Œ± ‚Üí·µá Œ≥)).to_fun c‚à• = ‚à•(algebra_map ùïú Œ≥) c‚à• : _
    ... = ‚à•c‚à• : norm_algebra_map_eq _ _,
    apply norm_const_eq ((algebra_map ùïú Œ≥) c), assumption,
  end,
  ..bounded_continuous_function.algebra }

/-!
### Structure as normed module over scalar functions

If `Œ≤` is a normed `ùïú`-space, then we show that the space of bounded continuous
functions from `Œ±` to `Œ≤` is naturally a module over the algebra of bounded continuous
functions from `Œ±` to `ùïú`. -/

instance has_scalar' : has_scalar (Œ± ‚Üí·µá ùïú) (Œ± ‚Üí·µá Œ≤) :=
‚ü®Œª (f : Œ± ‚Üí·µá ùïú) (g : Œ± ‚Üí·µá Œ≤), of_normed_group (Œª x, (f x) ‚Ä¢ (g x))
(f.continuous.smul g.continuous) (‚à•f‚à• * ‚à•g‚à•) (Œª x, calc
  ‚à•f x ‚Ä¢ g x‚à• ‚â§ ‚à•f x‚à• * ‚à•g x‚à• : normed_space.norm_smul_le _ _
  ... ‚â§ ‚à•f‚à• * ‚à•g‚à• : mul_le_mul (f.norm_coe_le_norm _) (g.norm_coe_le_norm _) (norm_nonneg _)
    (norm_nonneg _)) ‚ü©

instance module' : module (Œ± ‚Üí·µá ùïú) (Œ± ‚Üí·µá Œ≤) :=
module.of_core $
{ smul     := (‚Ä¢),
  smul_add := Œª c f‚ÇÅ f‚ÇÇ, ext $ Œª x, smul_add _ _ _,
  add_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, add_smul _ _ _,
  mul_smul := Œª c‚ÇÅ c‚ÇÇ f, ext $ Œª x, mul_smul _ _ _,
  one_smul := Œª f, ext $ Œª x, one_smul ùïú (f x) }

lemma norm_smul_le (f : Œ± ‚Üí·µá ùïú) (g : Œ± ‚Üí·µá Œ≤) : ‚à•f ‚Ä¢ g‚à• ‚â§ ‚à•f‚à• * ‚à•g‚à• :=
norm_of_normed_group_le _ (mul_nonneg (norm_nonneg _) (norm_nonneg _)) _

/- TODO: When `normed_module` has been added to `normed_space.basic`, the above facts
show that the space of bounded continuous functions from `Œ±` to `Œ≤` is naturally a normed
module over the algebra of bounded continuous functions from `Œ±` to `ùïú`. -/

end normed_algebra

end bounded_continuous_function
